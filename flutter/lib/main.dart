

import 'package:flutter/material.dart';
import 'dart:async';
import './Constant/constant.dart';
import './Screens/ProfilePage.dart';
import './Screens/settingsPage.dart';
import 'dart:convert';
import 'dart:math';
import 'dart:typed_data';
import 'package:telephony/telephony.dart';
import 'package:flutter_reactive_ble/flutter_reactive_ble.dart';
import 'package:percent_indicator/circular_percent_indicator.dart';
import 'package:http/http.dart' as http;
import 'package:syncfusion_flutter_gauges/gauges.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter_ringtone_player/flutter_ringtone_player.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(MaterialApp(
    home: MyApp(),
    title: 'Azmalert App',

    routes: <String, WidgetBuilder>{
      //SPLASH_SCREEN: (BuildContext context) => new MapScreen(),
      PROFILE: (BuildContext context) => new ProfilePage(),
      SETTINGS: (BuildContext context) => new settingsPage(),
      NOTIFICATION: (BuildContext context) => new ProfilePage(),
    },
  ));

}


class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Azmalert App',
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: DefaultTabController(
        length: 2,
        child: Scaffold(
          appBar: AppBar(
            bottom: const TabBar(
              tabs: [
                Tab(icon: Icon(Icons.health_and_safety_outlined), text: "Asthma Monitor"),
                Tab(icon: Icon(Icons.info_outline), text: "Air Quality Monitor"),
              ],
            ),
            title: const Text('Azmalert App'),
          ),
          drawer: Drawer(
            child: ListView(
              children: <Widget>[
                DrawerHeader(
                  decoration: BoxDecoration(
                      gradient: LinearGradient(
                          colors: <Color>[Colors.indigo, Colors.indigoAccent])),
                  child: Container(
                    child: Column(
                      children: <Widget>[
                        Material(
                          borderRadius: BorderRadius.all(Radius.circular(50.0)),
                          elevation: 10,
                          child: Padding(
                            padding: EdgeInsets.all(10.0),
                            child: Image.asset('images/Azmalert.png',
                                width: 80, height: 80),
                          ),
                        ),

                      ],
                    ),
                  ),
                ),
                CustomListTile(Icons.person, 'Profile', () => {Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => ProfilePage()),
                )}),
                CustomListTile(Icons.notifications, 'Notifications', () => {NOTIFICATION}),
                CustomListTile(Icons.settings, 'Settings', () => {Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => settingsPage()),
                )}),
              ],
            ),
          ),
          body: TabBarView(
            children: [
              AzmalertPage(title: 'Asthma Monitor'),
              AirQualityPage(title: 'Air Quality Monitor'),

            ],
          ),
        ),

      ),
    );
  }
}

class CustomListTile extends StatelessWidget {
  IconData icon;
  String text;
  Function onTap;

  CustomListTile(this.icon, this.text, this.onTap);
  @override
  Widget build(BuildContext context) {

    return Padding(
      padding: const EdgeInsets.fromLTRB(8.0, 0, 8.0, 0),
      child: Container(
        decoration: BoxDecoration(
            border: Border(bottom: BorderSide(color: Colors.grey.shade400))),
        child: InkWell(
            splashColor: Colors.orangeAccent,
            onTap: onTap,
            child: Container(
              height: 50,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: <Widget>[
                  Row(
                    children: <Widget>[
                      Icon(icon),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          text,
                          style: TextStyle(fontSize: 16.0),
                        ),
                      ),
                    ],
                  ),
                  Icon(Icons.arrow_right)
                ],
              ),
            )),
      ),
    );
  }
}
class AirQualityPage extends StatefulWidget {
  AirQualityPage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _AirQualityPageState createState() => _AirQualityPageState();
}

class _AirQualityPageState extends State<AirQualityPage> {
  final FlutterReactiveBle _ble = FlutterReactiveBle();
  StreamSubscription _subscription;
  List<StreamSubscription<ConnectionStateUpdate>> _connection= [];
  int temperature,humidity,gas,iaq;
  String device1="empty",temperatureStr, humidityStr, gasStr, iaqStr, iaqState;

  @override
  void initState() {

    super.initState();
    _connectBLE1();
  }
//this function reads the values from the bytes and converts them to a decimal number
  int fromBytesToInt32(int b3, int b2, int b1, int b0) {
    final int8List = new Int8List(4)
      ..[3] = b3
      ..[2] = b2
      ..[1] = b1
      ..[0] = b0;
    return int8List.buffer.asByteData().getInt32(0);
  }

//this function connects the mobile application to the arduino card to read the environment sensor values
  void _connectBLE1() {

    setState(() {
      temperatureStr = '?';
      humidityStr = "?";
      gasStr = "?";
      iaq = 0;
      iaqStr = "?";
      iaqState = "Loading";
    });
    _subscription = _ble.scanForDevices(
        withServices: [],
        scanMode: ScanMode.lowLatency,
        requireLocationServicesEnabled: true).listen((device) async {

      if (device.name == 'ENV') {
        print('ENV found!');
        device1=device.id;
        print(device1);
        _connection[0] = _ble
            .connectToDevice(
          id: device.id,
        )
            .listen((connectionState) async {
          // Handle connection state updates
          print('connection state:');
          print(connectionState.connectionState);
          if (connectionState.connectionState ==
              DeviceConnectionState.connected) {


          }
        }, onError: (dynamic error) {
          // Handle a possible error
          print(error.toString());
        });
      }
      //these are the characteristics containing the sensors values to read
      final characteristic_ENV1 = QualifiedCharacteristic(
          serviceId: Uuid.parse("181B"),
          characteristicId: Uuid.parse("2A61"),
          deviceId: device1);
      final response_ENV_1 = await _ble.readCharacteristic(characteristic_ENV1);

      final characteristic_ENV2 = QualifiedCharacteristic(
          serviceId: Uuid.parse("181B"),
          characteristicId: Uuid.parse("2A62"),
          deviceId: device1);
      final response_ENV_2 = await _ble.readCharacteristic(characteristic_ENV2);

      final characteristic_ENV3 = QualifiedCharacteristic(
          serviceId: Uuid.parse("181B"),
          characteristicId: Uuid.parse("2A63"),
          deviceId: device1);
      final response_ENV_3 = await _ble.readCharacteristic(characteristic_ENV3);
      gas =fromBytesToInt32(response_ENV_3[0],response_ENV_3[1],response_ENV_3[2],response_ENV_3[3]);
      temperature =fromBytesToInt32(response_ENV_1[0],response_ENV_1[1],response_ENV_1[2],response_ENV_1[3]);
      humidity =fromBytesToInt32(response_ENV_2[0],response_ENV_2[1],response_ENV_2[2],response_ENV_2[3]);
//updating the values of the readings in the application
      setState(() {
        iaq = (log(gas) + 0.04 * humidity).round();
        gas = (gas / 1000).round();
        temperatureStr = temperature.toString() + '°C';
        humidityStr = humidity.toString() + '%';
        gasStr = gas.toString() + 'kΩ';
        iaqStr = iaq.toString();
        iaqState = (iaq >= 101) ? "Unhealthy" : (iaq >= 51 && iaq <= 100) ? "Moderate" : "Good";
      });
    }, onError: (error) {
      print('error!');
      print(error.toString());
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Container(
          decoration: BoxDecoration(
              color: Colors.transparent
            /*
            gradient: LinearGradient(
                begin: Alignment.topRight,
                end: Alignment.bottomLeft,
                colors: [Color(0xffffdf6f), Color(0xffeb2d95)])
            */
          ),
          child: Column(
              children: <Widget>[
                SizedBox(
                  height: 20,
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    Card(
                      child: Container(
                        width: 100,
                        height: 200,
                        decoration: BoxDecoration(
                            color: Colors.transparent
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: <Widget>[
                            SizedBox(
                              height: 20,
                            ),
                            Container(
                              width: 100,
                              height: 100,
                              child: Image.asset('images/temperature.png'),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                              "Temperature",
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            Expanded(
                              child: Container(),
                            ),
                            Text(
                              temperatureStr,
                              style: TextStyle(fontSize: 30),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                          ],
                        ),
                      ),
                    ),
                    Card(
                      child: Container(
                        width: 100,
                        height: 200,
                        decoration: BoxDecoration(
                            color: Colors.transparent
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: <Widget>[
                            SizedBox(
                              height: 20,
                            ),
                            Container(
                              width: 100,
                              height: 100,

                              child: Image.asset('images/humidity.png'),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                              "Humidity",
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            Expanded(
                              child: Container(),
                            ),
                            Text(
                              humidityStr,
                              style: TextStyle(fontSize: 30),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                          ],
                        ),
                      ),
                    ),
                    Card(
                      child: Container(
                        width: 100,
                        height: 200,
                        decoration: BoxDecoration(
                            color: Colors.transparent
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: <Widget>[
                            SizedBox(
                              height: 20,
                            ),
                            Container(
                              width: 100,
                              height: 100,
                              child: Image.asset('images/gas.png'),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                              "Gas",
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            Expanded(
                              child: Container(),
                            ),
                            Text(
                              gasStr,
                              style: TextStyle(fontSize: 30),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                          ],
                        ),
                      ),
                    )
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    Card(
                      child: Container(
                        width: 200,
                        height: 250,
                        decoration: BoxDecoration(
                            color: Colors.transparent
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: <Widget>[
                            SizedBox(
                              height: 20,
                            ),
                            Stack(
                              alignment: Alignment.center,
                              children: [
                                SizedBox(
                                    width: 150,
                                    height: 150,
                                    child: new CircularPercentIndicator(
                                      radius: 150,
                                      lineWidth: 15.0,
                                      percent: (iaq <= 200) ? iaq / 200 : 0.0,
                                      center: Container(
                                        margin: EdgeInsets.only(top: 40.0),
                                        padding: EdgeInsets.only(top: 10.0),
                                      ),
                                      circularStrokeCap: CircularStrokeCap.round,
                                      progressColor: (iaq >= 101) ? Colors.red : (iaq >= 51 && iaq <= 100) ? Colors.yellow : Colors.green,
                                    )
                                ),

                                Text(
                                  iaqStr,
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold, fontSize: 30),
                                ),
                              ],
                            ),
                            SizedBox(
                              height: 20,
                            ),
                            Text(
                              "Air Quality Index",
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                              iaqState,
                              style: TextStyle(fontWeight: FontWeight.bold,
                                  color: (iaqState == "Unhealthy") ? Colors.red : (iaqState == "Moderate") ? Colors.yellow : (iaqState == "Good") ? Colors.green : Colors.black),
                            )
                          ],
                        ),
                      ),
                    )
                  ],
                )
              ]
          ),
        )
    );
  }
}


class AzmalertPage extends StatefulWidget {
  AzmalertPage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _AzmalertPageState createState() => _AzmalertPageState();
}

class _AzmalertPageState extends State<AzmalertPage> {

  final FlutterReactiveBle _ble = FlutterReactiveBle();
  StreamSubscription _subscription;
  List<StreamSubscription<ConnectionStateUpdate>> _connection= [];
  String accelStr = "Loading",device1="empty",device2="empty";
  List<int> L1_s2,L2_s2;
  int marge=400,chunk=1000,index=0,pos=600,temperature,humidity,gas,iaq,counter=0,c=0,temper;
  String _number='',category = "?",Longitude='',Latitude='',Location1,Location2;
  String temperatureStr, humidityStr, gasStr, iaqStr, iaqState;
  BuildContext dialogContext;
  final Geolocator geolocator = Geolocator()..forceAndroidLocationManager;
  Position _currentPosition;
  List<double> chunk_1=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  List<double> chunk_2=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  List<double> chunk_3=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  List<double> test=   [-0.12151906034581145, -0.1665450498054623, -0.2073700456675162, -0.24308283934745928, -0.27293952117601294, -0.29635309056937154, -0.3128795079508201, -0.32220590143155087, -0.32414561196706665, -0.3186430256778719, -0.3057889424036706, -0.2858448632699789, -0.25927236684283694, -0.22676198759550945, -0.18925496502722663, -0.14795106873363015, -0.104296493421603, -0.05994751515143875, -0.016708052645743546, 0.023557763631242325, 0.05903376596812432, 0.08807344168067253, 0.1093254633181605, 0.12185175958352414, 0.12522628635751348, 0.11960332039373457, 0.10574597783177313, 0.08500863713610009, 0.059270782200109846, 0.030824136691635022, 0.0022194268836987947, -0.023916750790194986, -0.04508109364283637, -0.05909265547091889, -0.06427479726632478, -0.05960367371058994, -0.044809101275069055, -0.02041724518129312, 0.012270737023406562, 0.05126454698542709, 0.0940299015848375, 0.13768244255054496, 0.17921527113475527, 0.21574162482065007, 0.2447324183325538, 0.26422833582290656, 0.27300792609410723, 0.27069659423867, 0.2578062214443072, 0.2357009681938847, 0.20649111749898774, 0.1728630373274481, 0.13785892949422263, 0.10462448290753346, 0.07614545816936705, 0.05499533074008214, 0.04311530549712696, 0.04164535262888058, 0.050820635430728525, 0.06994218146978361, 0.09742437666752204, 0.13091538949445644, 0.16748052696153815, 0.2038333159435025, 0.23659523839370275, 0.26256284860722096, 0.2789606340141293, 0.28365945151587946, 0.2753435190009536, 0.25361345992124773, 0.21901836542769637, 0.1730157563705012, 0.11786417145657731, 0.05645837397763044, -0.007878579504404988, -0.07162926132268554, -0.13132328101773258, -0.18376791577240867, -0.22625144256780877, -0.2567056700024641, -0.2738181261573564, -0.2770888524660939, -0.2668313487620456, -0.2441214927028804, -0.21070185378544432, -0.16885146271744156, -0.12123261724334856, -0.0707266645929096, -0.020269978191670243, 0.027300272080570984, 0.0693832043988846, 0.10372937518972461, 0.12853175888330548, 0.142492566600059, 0.14486761358381667, 0.13549094873297562, 0.11478271553906814, 0.08374277592734665, 0.04393164628450644, -0.0025610068691537665, -0.053161414543551326, -0.10487251596472998, -0.15435337798160295, -0.19802000699865138, -0.23216947803017074, -0.2531276457480067, -0.2574183515889554, -0.241949214513707, -0.20420609287244113, -0.14244548922706313, -0.05587191484227746, 0.05521411298839106, 0.18931191541093031, 0.3436735848924235, 0.5143246012488073, 0.6961587489136483, 0.8831088988010226, 1.0683894641704648, 1.244800367900819, 1.4050767096134864, 1.542263545382161, 1.6500917951984486, 1.723329680647773, 1.7580845302584656, 1.7520323580681483, 1.7045572121670496, 1.616788599685159, 1.4915328431931407, 1.3331023935988637, 1.1470552141789865, 0.9398636351735847, 0.7185378797397669, 0.4902332128392307, 0.26187096692810746, 0.03980236728661339, -0.17045983123729888, -0.36442308067253215, -0.5386992992449778, -0.6909898398497671, -0.8199786440523968, -0.9251497360700445, -1.0065524442999205, -1.0645428054413753, -1.0995319712733458, -1.1117718042073506, -1.1012041942647277, -1.0673942231293903, -1.0095586769591203, -0.926691333788057, -0.8177758523997152, -0.6820669776979319, -0.5194121519872397, -0.3305793758898625, -0.11755399765477259, 0.11623253899270762, 0.36577496980254465, 0.6244930796563771, 0.884372453041228, 1.1362500630265664, 1.3702343410223332, 1.576236255023866, 1.7445762255771855, 1.8666225585513545, 1.9354114149043407, 1.9461968313625355, 1.8968822627858029, 1.7882924569664977, 1.624255719879456, 1.4114809425397075, 1.1592299967068176, 0.8788029142731619, 0.5828691986770517, 0.2846922621764221, -0.002695915464586496, -0.2673072353044304, -0.49893392638480605, -0.6897507677543355, -0.834734788174989, -0.9318683903747574, -0.9821092880220968, -0.9891298559614923, -0.958847862685359, -0.8987884115393523, -0.817331689182549, -0.7229114636910946, -0.6232342019408061, -0.5245876462162673, -0.4313006680381336, -0.3454036866360769, -0.26652187210622313, -0.19201313506861695, -0.1173412244256418, -0.036652964505032776, 0.0564903792777488, 0.16829270668643803, 0.3038884978685069, 0.46657228826606423, 0.6571670979786155, 0.873596709286205, 1.1107107374135996, 1.3603907654404641, 1.611942067554979, 1.8527505776028417, 2.069160863370367, 2.247509997543375, 2.3752362208317352, 2.4419716495834103, 2.4405259676562263, 2.3676734474958283, 2.2246685209704364, 2.017434593845139, 1.7563954320291035, 1.4559463509575639, 1.1335914128142988, 0.8088005495459479, 0.501664709888918, 0.23144574673718088, 0.01512920027991166, -0.13390867515502614, -0.20701377133907092, -0.2010548934346768, -0.11884182040199177, 0.030882651735110817, 0.23388878146463343, 0.4713234061264895, 0.720938460334761, 0.9586036583862714, 1.159999783712638, 1.3023737470864556, 1.3662299787114456, 1.3368353859359956, 1.2054269085078626, 0.9700308078537019, 0.6358297704986036, 0.21504570017082392, -0.27365963899698187, -0.8062297287336918, -1.3546361019392816, -1.888584063498552, -2.377386678989665, -2.7918808126713004, -3.1062565105847164, -3.2996777306677387, -3.357587738327019, -3.272615196633854, -3.045025334122648, -2.6826924245937427, -2.200602791175258, -1.6199292378129388, -0.966745943486501, -0.27047546705044895, 0.43782490354147335, 1.127222613754011, 1.7686009698698095, 2.336176491868766, 2.8087528838878075, 3.17064357687462, 3.4122203122222627, 3.5300726825792705, 3.526790831125833, 3.4104086242875087, 3.193565784693009, 2.8924632985759082, 2.525695956485401, 2.113048731141358, 1.6743399599803455, 1.2283846074583573, 0.7921362970657336, 0.38004872641275633, 0.003677124728588383, -0.3284797299907257, -0.6109151217324434, -0.8408616579756796, -1.01789604108987, -1.1434542999079378, -1.2203124619451244, -1.2520847400190087, -1.2427840002856752, -1.196478461006432, -1.1170653957636183, -1.0081683907472947, -0.8731507812104154, -0.7152255364692643, -0.5376321587654148, -0.34384491666000205, -0.1377744181744617, 0.07607375787382135, 0.2925141823638262, 0.5056926363559235, 0.7092044121732537, 0.8963190799507195, 1.0602988520058882, 1.1947867277044182, 1.2942318394511552, 1.3543136843429593, 1.3723247750706853, 1.3474729104114462, 1.2810696373517536, 1.1765801069681285, 1.0395206747279675, 0.8772032951855107, 0.6983389007691176, 0.5125243784729949, 0.32964836579638374, 0.15925892795101965, 0.009940535187246101, -0.11125178923588096, -0.19925682196901862, -0.2513329479850978, -0.2672188297342251, -0.24911511423607866, -0.20148740061664622, -0.13070484798786153, -0.04454189643095761, 0.04841849034457807, 0.13943378936580492, 0.22025269079458068, 0.28371723838111484, 0.32426995497332656, 0.33832739444756327, 0.3244925080956041, 0.2835913767308481, 0.21853414895989084, 0.13401425714162943, 0.03607297729464285, -0.06843291595579085, -0.17241515225974433, -0.2691406824286766, -0.3527725593463476, -0.4188208650274649, -0.46446764538913826, -0.4887408449413647, -0.49252527322616224, -0.47841257504754614, -0.4504058366571226, -0.4135066870612444, -0.37322251962155933, -0.33503794823085425, -0.30389728938687083, -0.28374351686051297, -0.27715390247450705, -0.28510389855762286, -0.3068794891909723, -0.3401452182809575, -0.38116151416694344, -0.4251319397575722, -0.4666497165877923, -0.5002042637878075, -0.5207032902918697, -0.523964618482662, -0.5071345070007677, -0.4689955476442319, -0.41013668565878025, -0.3329697333250659, -0.24158989336268005, -0.141491150021623, -0.03915977712766573, 0.05842040574630023, 0.14430990875714222, 0.21215749409342788, 0.25670094635334284, 0.2741832227516426, 0.2626497529314282, 0.222102766566742, 0.15450062475634935, 0.06360317093240253, -0.04532302385742357, -0.16591406773100584, -0.2911980369051844, -0.4141231023509173, -0.5280807276012213, -0.6273812003977336, -0.7076434138384127, -0.766068648589474, -0.8015784135591355, -0.8148082575978586, -0.8079618234890322, -0.784541199598045, -0.7489798186591723, -0.7062118934352117, -0.6612170277572624, -0.6185798413897723, -0.5821021498809789, -0.5544997075609956, -0.5372072978216285, -0.5303058157997698, -0.5325738699232574, -0.5416553393625863, -0.5543242551744859, -0.5668202076760198, -0.5752219195923367, -0.5758241154306453, -0.5654835294209337, -0.5419036980227346, -0.5038346684088039, -0.45117227171672153, -0.3849513323367423, -0.30723718653571747, -0.22092922791516464, -0.12949802151189502, -0.036683125511711184, 0.05381835847627327, 0.13864254416350227, 0.21500180892799667, 0.2808586103262236, 0.33501603280124226, 0.37711974199037923, 0.4075751066020685, 0.4273918048729589, 0.43797542885283375, 0.44089073706137133, 0.43762378989048667, 0.4293699885271938, 0.41687205677384764, 0.40032655608513923, 0.3793701491711121, 0.3531482579764676, 0.3204598484628518, 0.2799637057044038, 0.23042457862069476, 0.17097268507378383, 0.10134778716261522, 0.022099636043703103, -0.06527996839498701, -0.15831224654530676, -0.25358434733416396, -0.34690149693836175, -0.43353008178582686, -0.5085141828676133, -0.5670403231453344, -0.6048196243457418, -0.6184537648411788, -0.6057514044868695, -0.5659651269626307, -0.4999251848104631, -0.41005488546983726, -0.30026257270964235, -0.1757159259134495, -0.04251473674362633, 0.09271253499493794, 0.2232561314947748, 0.34277981931802565, 0.4457457365101417, 0.5277742258850544, 0.5859091576116254, 0.6187674567303518, 0.626561702846242, 0.6109958445355431, 0.5750452542457306, 0.5226425180169779, 0.4582985732755497, 0.38669431711998226, 0.31228009305601123, 0.2389193074296329, 0.16960792648443387, 0.10629416956443925, 0.04981302585706939, -6.0824255444395615e-05, -0.044449481675838905, -0.08511614473072732, -0.12414464258323517, -0.16358791099096243, -0.2051223037790907, -0.24974429957901936, -0.29754233169449473, -0.3475694685381115, -0.3978331286915457, -0.44540679491115953, -0.48665682459615783, -0.5175660386647284, -0.534125873341943, -0.532761437449706, -0.5107495525674997, -0.4665892024384733, -0.4002868933121455, -0.31352600281962584, -0.20969872626348157, -0.09379089858731775, 0.027877239362151446, 0.1480384767997357, 0.2589667734375726, 0.3530291451001062, 0.4232579121695553, 0.4638971364853296, 0.4708781874500199, 0.4421843351815184, 0.3780726666646647, 0.2811327588395126, 0.15617448115012805, 0.009950944929450789, -0.14926418489330867, -0.31221415952014736, -0.46927142939356375, -0.6110789387369553, -0.7291725367286032, -0.8165383986652687, -0.8680648279366389, -0.880856473964339, -0.8543900872385368, -0.7905034826372499, -0.6932223326546499, -0.5684416873046579, -0.423489723020242, -0.26660933032208733, -0.10639816456076093, 0.04875060977116879, 0.1911664689560993, 0.3143431288718043, 0.4132757278756987, 0.48467518415068817, 0.5270517769264536, 0.5406705421188335, 0.5273908071786684, 0.4904103386254162, 0.4339405354253622, 0.36284249052709694, 0.2822544264790311, 0.19723910165324854, 0.11247561934717357, 0.0320141747303809, -0.04089470773019831, -0.10389225371821162, -0.15552768322701038, -0.19520756687758067, -0.22309191028160175, -0.23995350048599182, -0.2470180899692919, -0.24580222614977998, -0.23796320197630816, -0.22517209145415196, -0.20901662234401366, -0.1909362449880565, -0.17218768158446482, -0.1538359142722536, -0.136763310016542, -0.12168856027791648, -0.10918735382316398, -0.09970807170717332, -0.09357803524006655, -0.09099859701845832, -0.09203023804446245, -0.09657141548772298, -0.10433683743164174, -0.11484185336661541, -0.12739959264637393, -0.14113634528957594, -0.15502858676587408, -0.16796225127309122, -0.17881170225288584, -0.18653273545835972, -0.1902612881118501, -0.1894076868884458, -0.1837355322946918, -0.17341485164186732, -0.15904097791526586, -0.14161359726591147, -0.12247428202528646, -0.1032052015311675, -0.08549611525769311, -0.07099070931991118, -0.061126371349469015, -0.0569832208942293, -0.05915835748385607, -0.06767974871449217, -0.08197102464152496, -0.10087391722685608, -0.12272958711189534, -0.14551413897573043, -0.1670178373979138, -0.18505250609259688, -0.19766788273744523, -0.20335575702065, -0.2012208273064656, -0.1910994604041735, -0.17361180362190787, -0.15013864231492166, -0.12272149822319607, -0.09389206302993344, -0.06644441803838455, -0.04316985737247898, -0.026578828297002203, -0.01863698519315478, -0.020542277273268406, -0.0325672468940928, -0.05398545657884046, -0.0830935935492444, -0.11733194938559421, -0.15349643883661246, -0.1880260045852685, -0.21734106849806625, -0.23820247690911983, -0.2480568340260727, -0.2453336818996751, -0.22966284572072407, -0.20198629031866827, -0.1645475923930036, -0.12075291231143027, -0.07490922019975259, -0.031857426228198864, 0.0034711256663040977, 0.02653766852452207, 0.03367575039218379, 0.022522949170816268, -0.007638158322070028, -0.05566649237815479, -0.11850356117391492, -0.19128382804067176, -0.2676147412359833, -0.34001187793643317, -0.4004603855363387, -0.4410615845225988, -0.45471437653988034, -0.4357758851680077, -0.38064512331672834, -0.2882176206050008, -0.1601676346687862, -0.0010271886380979153, 0.1819532546818549, 0.3791604057858777, 0.5791704322411629, 0.7694619532963676, 0.9372400308280479, 1.070311468424744, 1.1579464231409968, 1.1916611934149366, 1.1658621393984456, 1.0783006449189887, 0.9303030583679449, 0.7267565220420109, 0.4758501351319063, 0.18858948218058974, -0.1218803182650569, -0.441093618197951, -0.7541655920872813, -1.0467107436139895, -1.3057130718800376, -1.5202872366583287, -1.6822795586739359, -1.7866709890419066, -1.8317601173324407, -1.8191214959683213, -1.7533515967060989, -1.6416301872889136, -1.4931375952002295, -1.3183772541198884, -1.1284574991205034, -0.9343865743993274, -0.7464304305540789, -0.5735746804556616, -0.4231209317106203, -0.30043472462606746, -0.20884870331061792, -0.14971166582502304, -0.12256290225832077, -0.1254026557648821, -0.15502426453628884, -0.20737186125384052, -0.2778893677429022, -0.3618315378741788, -0.45451529521232553, -0.5514986940449079, -0.6486844931701833, -0.7423545428093143, -0.8291490013457963, -0.9060100503363665, -0.9701127408559096, -1.018805653373957, -1.0495812696863744, -1.0600907184180992, -1.048210498026952, -1.0121607209399297, -0.9506662765790688, -0.8631450011293073, -0.7499012994638211, -0.6123003463944854, -0.452897415586083, -0.27549917656488215, -0.08513879730852993, 0.11204605551061941, 0.30903439937268107, 0.49823483768674665, 0.6718733941509991, 0.8224313270132244, 0.9431017936356142, 1.0282306997541626, 1.0737065772698007, 1.0772670061873277, 1.0386947468036263, 0.9598849096597938, 0.8447744550214078, 0.6991361993389312, 0.5302503421634912, 0.34647634458597654, 0.15675591453529636, -0.029916813632527427, -0.2050195357892549, -0.3609830449624561, -0.49159613047488804, -0.5923074802028354, -0.6604067625252427, -0.6950771054202095, -0.6973215478598377, -0.6697757862977443, -0.6164278294190844, -0.5422713189511192, -0.4529228059116925, -0.3542339839183715, -0.2519278423958692, -0.1512832418708127, -0.05688608173900336, 0.027542260502382294, 0.09923639381344604, 0.15640287530964297, 0.19817152469524962, 0.2244974850663656, 0.23603187563766231, 0.233979125021142, 0.2199572314819193, 0.19587361991742808, 0.1638244890833833, 0.12602022336126625, 0.08473428398715008, 0.04226866425935458, 0.0009260508901044923, -0.0370223359593431, -0.06938348346335643, -0.09411153807344556, -0.10940242098088078, -0.11381234946977663, -0.10639293054396312, -0.08683029336958696, -0.05557163795079458, -0.013920240610198377, 0.0359201572660273, 0.09086830494981157, 0.14706769972962858, 0.20007322636017372, 0.2451188591207293, 0.27745398272766025, 0.2927269808632717, 0.2873870413649426, 0.25906957375538536, 0.2069280120089871, 0.13187562182145635, 0.03670546929288395, -0.07393519984026782, -0.1937287783151374, -0.3150285699773038, -0.42934233477894496, -0.5279286976325773, -0.6024643672741486, -0.6457303528941648, -0.652259609876464, -0.6188875988434646, -0.5451515107797344, -0.43349334126712413, -0.2892360553010271, -0.1203197827414249, 0.06319505096268618, 0.2498301766775539, 0.42755063835356827, 0.5847213430368422, 0.7110838245289757, 0.7986720153425735, 0.8425864584698354, 0.8415539623837193, 0.7982138875417252, 0.7190921386880199, 0.614248080275718, 0.4966061220618621, 0.38101048924166436, 0.28306644488906624, 0.21785180893156011, 0.19859713169628332, 0.23543989305129476, 0.3343567559702527, 0.4963680250355342, 0.7170905725558223, 0.9866908061329839, 1.2902595677875557, 1.608598442856507, 1.9193743652283428, 2.1985692579766476, 2.4221262280765488, 2.567675674412716, 2.6162151719081437, 2.553617091311676, 2.3718477752985856, 2.0698011053173464, 1.6536761056132951, 1.1368608462538008, 0.5393208467370938, -0.11347332005828105, -0.7920102979529279, -1.464495879321945, -2.0987843263907946, -2.6643496984946764, -3.1341606580135886, -3.486329284133644, -3.705421110601623, -3.7833385974493017, -3.7197215791736813, -3.521843452393487, -3.20401824124287, -2.786568414067224, -2.2944337885864523, -1.755525794205867, -1.1989470463200917, -0.6532025909405319, -0.14452600924194034, 0.30456870131774083, 0.6764187564056876, 0.9589633764200106, 1.1460797060765144, 1.2375016270512151, 1.2383500004617496, 1.1583302628493095, 1.0106752858041081, 0.8109264749129821, 0.5756533112978293, 0.3212106710027734, 0.06262469534825939, -0.18731726498277715, -0.4187175406021878, -0.6249285220062333, -0.8026161765476159, -0.9515445266365268, -1.0741203378543813, -1.1747543319577542, -1.259106763712466, -1.3332905103020731, -1.4031037914720845, -1.473357674208695, -1.5473514997537845, -1.6265335655675046, -1.710366319657239, -1.7963966153177766, -1.8805138392505345, -1.9573634111306883, -2.0208714260255594, -2.0648288767750214, -2.083481340978359, -2.072072208745222, -2.027294022611048, -1.9476125158329103, -1.8334404269961948, -1.687151939787009, -1.5129424058539065, -1.3165506809892351, -1.1048719295420104, -0.885496360390742, -0.6662135761338105, -0.4545228901156018, -0.25718725109224, -0.07986275032888089, 0.07317226732867431, 0.19917389399376412, 0.29697057162620444, 0.36688737578133157, 0.41057046974077455, 0.4307324620318814, 0.4308441691386353, 0.4148006600019806, 0.3865894311214705, 0.349986325584467, 0.3083007302104438, 0.2641861486072776, 0.2195260091251749, 0.17539809338460982, 0.13211479292404485, 0.08933096726978931, 0.04620682340513765, 0.0016101727833464736, -0.04565927470120046, -0.09664129275732694, -0.1519990996616646, -0.2118310210225996, -0.27552247847934813, -0.3416479696857575, -0.407929525028064, -0.4712549244064139, -0.5277558802670754, -0.5729435338951024, -0.6018960155460237, -0.6094904946724892, -0.5906700853018672, -0.5407341645808887, -0.4556391173018763, -0.33229527230415334, -0.16884491875335214, 0.03509411570423415, 0.27823465210861, 0.5574905221130023, 0.867923755734803, 1.2027785735562344, 1.5536085648712343, 1.9104989818288494, 2.26238093606121, 2.597428703865664, 2.9035256674581973, 3.1687790448476227, 3.382058924100892, 3.5335336493219396, 3.6151716900479243, 3.621180060865842, 3.5483513187124283, 3.3962951755485804, 3.167536681397859, 2.867470446990448, 2.5041690232667566, 2.088052750285923, 1.6314374639487736, 1.147984711448365, 0.6520859127575419, 0.15821664280968145, -0.31970053246784874, -0.7688866972127727, -1.1782159511486445, -1.5386145213169578, -1.8433285652152809, -2.0880490885022955, -2.270892698899017, -2.392247223150134, -2.4545007007310566, -2.461680170575996, -2.4190323459792786, -2.332581271854725, -2.2086981466482074, -2.053715684721688, -1.8736139584043452, -1.6737970833339157, -1.4589710723907572, -1.2331234850453956, -0.9995959989047173, -0.7612325674153728, -0.5205791464408686, -0.2801066562914708, -0.04242726509913905, 0.1895246419846338, 0.4123714393964962, 0.6222494658135881, 0.8148546357273065, 0.9855775294101172, 1.1297197619684631, 1.2427748535174497, 1.3207497290257624, 1.3604980270570495, 1.3600340569740565, 1.3187967442899688, 1.23783621793614, 1.1199015421488625, 0.9694159725265984, 0.7923353318017275, 0.5958948476125058, 0.38825921677124176, 0.178098932647855, -0.025877687992960034, -0.2154033703518894, -0.38310702646851463, -0.5229122262806596, -0.6303504101673449, -0.7027669473303976, -0.7394065674603583, -0.7413741204089423, -0.7114762430246118, -0.6539585219548394, -0.5741603908465358, -0.47811567597966664, -0.37212997482507154, -0.2623667034070082, -0.15447169813375272, -0.05326194788398125, 0.037502197879256974, 0.11524955634630211, 0.1786317799801202, 0.22746268256987398, 0.2625750749274975, 0.2856129289470689, 0.29878083361670876, 0.30457475726574196, 0.30551801190424255, 0.3039241500070865, 0.30170461176512015, 0.30023372550950456, 0.30027768635966684, 0.30198798147408207, 0.3049539644516253, 0.308304410069119, 0.31084429660597296, 0.31121101663901474, 0.30803379854928237, 0.30008125923100265, 0.2863844864783562, 0.26632653218708124, 0.23969327074899016, 0.2066847928404735, 0.16789042800173481, 0.12423374106749022, 0.07689614110163151, 0.027228908019203763, -0.023336557800462326, -0.07337153545607876];
  double asthmaValue=0;
  String asthmaPercent='Loading';
  final Telephony telephony = Telephony.instance;
  @override
  void initState() {
    super.initState();
    _getCurrentLocation();
    _connectBLE2();
  }
  //this function predicts if there is an asthma attack based on the accelerometer values
  void predictAsthma(List<double> v) async {
    List<List<double>> L=List<List<double>>.filled(1, [0], growable: true);
    L[0]=v;
    final response = await http.post(
      Uri.parse('https://azmalert.azurewebsites.net/predict'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, List<List<double>>>{
        'vector': L,
      }),
    );
    String res=response.body;
    Map R = json.decode(res);
    var _list = R.values.toList();
    print(res);
    setState(() {
      asthmaValue=double.parse(_list[1])*100;
      asthmaPercent=asthmaValue.toStringAsFixed(2)+"%";
    });
      if(asthmaValue>55)
        {
          counter+=1;
          if(counter==2)
            {
               sendSMS();
              showAlertDialog(context);
              FlutterRingtonePlayer.playAlarm();
              counter=0;
            }
        }
      else
        counter=0;
  }
  //this function displays an alert pop-up in case of asthma attack
  showAlertDialog(BuildContext context) {//*3
    // set up the button
    Widget dismissButton = TextButton(
      child: Text("Dismiss"),
      onPressed: () {FlutterRingtonePlayer.stop();
      Navigator.of(dialogContext).pop();},
    );

    // set up the AlertDialog
    AlertDialog alert = AlertDialog(
      title: Text("Asthma Alert Dismiss"),
      content: Text("This is an Asthma attack, please select dismiss if you're not having an Asthma attack"),
      actions: [
        dismissButton,
      ],
    );

    // show the dialog
    showDialog(

      context: context,
      builder: (BuildContext context) {
        dialogContext = context;
        return alert;
      },
    );
  }
  // sending sms to the emergency contact
  void sendSMS() async {
    _getCurrentLocation();
    String msg=' Help I am having an asthma attack,I am at:'+'https://www.google.com/maps/search/?api=1&query='+Latitude+','+Longitude;
    telephony.sendSms(
    to: "21626523966",
    message: msg
    );
  }
  //getting the current location of the user
  String _getCurrentLocation() {

    geolocator
        .getCurrentPosition(desiredAccuracy: LocationAccuracy.best)
        .then((Position position) {
      setState(() {
        _currentPosition = position;
        Longitude=_currentPosition.longitude.toString();
        Latitude=_currentPosition.latitude.toString();
      });
    }).catchError((e) {
      print(e);
    });
    return _currentPosition.toString();
  }
  //this function connects the mobile application to the arduino card to read the accelerometer sensor values

  void _connectBLE2() async{
    for(int i=0;i<1000;i++)
    {
      test[i]=0;
    }
    chunk_1=test;
    chunk_2=test;
    setState(() {
      temperatureStr = 'Loading';
    });
    _subscription = _ble.scanForDevices(
        withServices: [],
        scanMode: ScanMode.lowLatency,
        requireLocationServicesEnabled: true).listen((device) async {


      if (device.name == 'ACCEL') {
        print('ACCEL found!');
        device2=device.id;
        print(device2);
        _connection[1] = _ble
            .connectToDevice(
          id: device.id,
        )
            .listen((connectionState) async {
          // Handle connection state updates
          print('connection state:');
          print(connectionState.connectionState);
          if (connectionState.connectionState ==
              DeviceConnectionState.connected) {
          }
        }, onError: (dynamic error) {
          // Handle a possible error
          print(error.toString());
        });
      }
      // car mte ACCEL

      final characteristic2 = QualifiedCharacteristic(
          serviceId: Uuid.parse("181A"),
          characteristicId: Uuid.parse("2A6E"),
          deviceId: device2);
      //filling the list with the accelerometer values
      while(true)
      {
        final response2 = await _ble.readCharacteristic(characteristic2);

            int valeur =fromBytesToInt32(response2[0],response2[1],response2[2],response2[3]);
            double d= valeur.toDouble();
            if(index>= pos)
            {
              chunk_2[index-pos]=d;
            }
            chunk_1[index]=d;
            index+=1;
            if (index==1000)
            {
              predictAsthma(chunk_1);
              chunk_1=chunk_2;
              chunk_2=test;
              index=marge;
              c++;

            }
          }
    }, onError: (error) {
      print('error!');
      print(error.toString());
    });
  }
  int fromBytesToInt32(int b3, int b2, int b1, int b0) {
    final int8List = new Int8List(4)
      ..[3] = b3
      ..[2] = b2
      ..[1] = b1
      ..[0] = b0;
    return int8List.buffer.asByteData().getInt32(0);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: SfRadialGauge(
            axes:<RadialAxis>[RadialAxis(

              pointers: <GaugePointer>[RangePointer(
                  value: asthmaValue,
                  enableAnimation: true,
                  color: (asthmaValue > 60) ? Colors.red : ((asthmaValue <=60) &&(asthmaValue >40)) ? Colors.orange :  Colors.green),
              ],

              annotations: <GaugeAnnotation>[
                GaugeAnnotation(widget: Container(child:
                Text(asthmaPercent,style: TextStyle(fontSize: 60,fontWeight:FontWeight.bold))),
                    angle: 90,positionFactor: 0)],
              showLabels: false,

              majorTickStyle: MajorTickStyle(
                  thickness: 0,
                  length: 0,
                  lengthUnit: GaugeSizeUnit.factor),
              minorTickStyle: MinorTickStyle(
                  thickness: 0,
                  length: 0,
                  lengthUnit: GaugeSizeUnit.factor),

            ),

            ]
        ),
      ),
    );
  }

}





